//2022.08.20.

//어서오세요! 커피전문점 수타박수입니다!
//세계에서 가장 맛있는 커피를 파는 수타박수에서는 매일 많은 사람들이 커피를 마시기 위해 방문하는 장소입니다.
//엘리스 토끼는 보다 정확한 금액을 계산하기 위해 계산기를 만드려고 합니다.
/* 수타박수의 메뉴와 가격은 아래와 같습니다.
    음료 종류       Price
    아메리카노      4100
    카페라떼        4600
    카라멜마끼아또  5100
*/
/* 지시사항
    1. 음료 주문을 배열로 받습니다.
    2. 주문한 메뉴의 총 가격을 출력합니다.
*/
/* 예시
    입력                                         출력
    ["아메리카노", "카페라떼", "카라멜마끼아또"]    13800
*/
function solution(input) {
    let answer = 0;
    for (let i = 0; i < input.length; i++)
        if (input[i] == "아메리카노")
            answer += 4100;
        else if (input[i] == "카페라떼")
            answer += 4600;
        else
            answer += 5100;
    return answer;
}

//반쪽짜리 피라미드
//엘리스 토끼는 사용자가 입력한 숫자만큼 높이를 가지는 반쪽 피라미드를 만들어주는 프로그램을 만들려고 합니다.
/* 지시사항
    num 매개변수에서 자연수를 입력받습니다. 입력된 숫자만큼 높이를 가지는 반쪽 피라미드를 출력하세요.
*/
/* 예시
    입력    출력
    3         *  # 공백 2칸
             **  # 공백 1칸
            ***  # 공백 0칸
*/
function solution(num) {
    let answer = [];
    for (let i = 1; i <= num; i++) {
        let str = "";
        for (let j = 0; j < num; j++)
            if (j >= num - i)
                str += "*";
            else
                str += " ";
        answer.push(str);
    }
    return answer.join("\n");
}

//좋아하는 숫자만 골라내기
//알파벳과 숫자가 섞인 문자열에서 특정 숫자를 골라내는 프로그램을 제작하려고 합니다.
/* 지시사항
    이 프로그램은 문자열에서 0,1,4을 제외한 숫자를 골라서 리스트로 출력하는 프로그램입니다.
    1. input 매개변수로부터 문자열을 입력받습니다.
    2. 문자열을 첫번째 문자부터 순서대로 보면서 좋하하는 숫자 목록인 num_tuple에 포함된 숫자라면 배열 result에 추가합니다.
    3. 완성된 배열 result를 출력합니다.
    4. 단 result에 숫자가 5개가 되면 그대로 출력합니다.
    5. 출력값은 solution 함수 안에서 return 하세요.
*/
/* 예시
    입력        출력
    asd222222   ['2', '2', '2', '2', '2']
*/
function solution(input) {
    const num_tuple = ['2', '3', '5', '6', '7', '8', '9'];
    const regex = /[2356789]/;
    let result = [];
    for (let i = 0; i < input.length; i++) {
        if (input[i].match(regex))
            result.push(input[i]);
        if (result.length == 5)
            break;
    }
    return result;
}

//잘린 피라미드 만들기
//중간부터 시작하는 조금 독특한 잘린 피라미드를 만듭니다.
/* 잘린 피라미드는 다음과 같은 피라미드를 의미합니다.
    ***
    ****
    *****
    ******
*/
/* 지시사항
    1. 매개변수 a, b 숫자 2개를 다음과 같이 입력 받습니다.
        4, 8
    2. 1번에서 4,8의 의미는 4개로 시작해서 8개로 끝나는 피라미드라는 의미입니다.
    3. 2번에서 해석한 그대로 아래처럼 *로 구성된 피라미드를 출력하시면 됩니다.
        ****
        *****
        ******
        *******
        ********
    4. 단, 피라미드가 길어지면 다음줄로 넘어갈 수 있어서 피라미드의 최대 폭은 15로 제한합니다. 즉, 사용자가 4,100이라는 입력을 해도 우리는 4, 15라는 피라미드를 그립니다.
    5. 피라미드를 solution 함수에서 return 하세요.
*/
//우리는 뒤집힌 피라미드는 허용하지 않을려고 합니다. 만약에 사용자가 14,2처럼 첫번째 수를 더 크게하거나 2,2처럼 두 숫자가 같게 입력하면 오류라고 출력합니다.
//자연스럽게 첫번째 수가 15보다 같거나 더 커도 오류를 출력합니다.
function solution(a, b) {
    if (a >= b || a >= 15)
        return "오류";
    let answer = [];
    for (let i = a; i <= Math.min(b, 15); i++) {
        let str = "";
        for (let j = 0; j < i; j++)
            str += "*";
        answer.push(str);
    }
    return answer.join("\n");
}

//겹치는 구간 찾기
//수직선 상에 A 구간과 B 구간이 있습니다.
//예를들어 A 구간은 3 이상 7 이하에 해당하며, B 구간은 5 이상 9 이하에 해당한다고 가정합니다.
//그렇다면 5 이상 7 이하의 구간은 A 구간이면서 동시에 B 구간이 됩니다.
//위와 같이, 두 구간의 범위가 주어졌을 때 두 구간이 겹치는 범위를 출력하세요.
//두 구간이 겹치지 않는 경우는 별도로 처리해야 합니다.
/* 지시사항
    1. 네 줄에 걸쳐 0이상의 정수가 매개변수 input에 받아집니다.
        첫 번째 줄에는 구간 A의 최솟값이 입력됩니다.
        두 번째 줄에는 구간 A의 최댓값이 입력됩니다
        세 번째 줄에는 구간 B의 최솟값이 입력됩니다
        네 번째 줄에는 구간 B의 최댓값이 입력됩니다.
        각 구간을 나타내는 최솟값과 최댓값은 항상 정수입니다.
    2. 구간 A와 B, 두 구간에 겹치는 부분의 최솟값과 최댓값을 공백으로 구분하여 출력하세요.
        최솟값과 최댓값이 동일한 경우 해당 구간은 겹치는 구간에 포함됩니다.
        만약 두 구간이 겹치지 않는다면 X를 출력해 주세요.
    3. 각 구간을 배열에 담아 solution 함수 안에서 return 하세요.
*/
/* 예시
    입력    출력
    3       [5, 7]
    7
    5
    9
    0       [3, 8]
    10
    3
    8
    7       X
    9
    0
    3
*/
function solution(input) {
    const arr = input.split("\n");
    const start = Math.max(arr[0], arr[2]);
    const end = Math.min(arr[1], arr[3]);
    return start > end ? "X" : [start, end];
}