//2022.08.22.

//겹치는 구간의 길이
//수직선 위에 두 선분 A와 B가 있습니다.
//각 선분은 중심의 위치와 선분의 길이 두 개의 수로 표현할 수 있습니다.
/* 각 선분은 (중심점,길이)로 다음과 같이 표현합니다.
        (2,4)
    위 선분은 중심점의 위치가 2이며 길이가 4인 선분을 의미합니다.
    즉, 이 선분은 0부터 4 까지의 선분이라고도 할 수 있습니다.
*/
/* 지시사항
    1. 두 선분을 중심점, 길이의 형식으로 각각 매개변수 a, b를 입력받습니다. 단, 공백 없이 ,으로만 구분합니다.
        2,4
        4,8
    2. 첫번째 선분은 중심점이 2이며 길이가 4인 선분으로 0에서 4까지의 선분입니다. 두번째 선분은 중심점이 4이며 길이가 8인 선분으로 0부터 8까지의 선분입니다.
    3. 두 선분이 겹치는 구간은 0부터 4까지이므로 겹치는 구간의 길이는 4입니다. 따라서 4를 출력합니다.
        4
    4. 만약 두 선분이 겹치지 않는다면 0을 출력합니다.
*/
//채점을 위해 출력값은 Number로 형변환하여 출력하세요. (선분의 길이는 짝수로 구성했습니다)
function solution(a, b) {
    a = a.split(','), b = b.split(',');
    a[1] /= 2, b[1] /= 2;
    const start = Math.max(a[0] - a[1], b[0] - b[1]), end = Math.min(parseInt(a[0]) + a[1], parseInt(b[0]) + b[1]);
    return start < end ? end - start : 0;
}

//문자의 빈도 조사하기
//문자열은 하나이상의 문자들로 구성되어 있습니다. 영어 문장의 경우 a부터 z까지의 알파벳으로 구성되어 있습니다.
//이런 영어문장에서 알파벳별로 갯수를 조사하는 자바스크립트 프로그램을 제작하려고 합니다.
/* 지시사항
    1. str 매개변수로 부터 문자열을 입력받습니다. (문자열에는 알파벳 및 공백만 포함됩니다.)
        My name is Elice
    2. 모든 문자를 소문자로 변환합니다.
        my name is elice
    3. 각 알파벳이 등장한 횟수를 alpha_cnt에 기록합니다.
    4. solution 함수 안에서 alpha_cnt 객체를 return 하세요.
*/
/* 예시
    출력
    { m: 2, y: 1, n: 1, a: 1, e: 3, i: 2, s: 1, l: 1, c: 1 }
*/
//alpha_cnt에서 공백이 존재할 경우 반드시 제거해야 합니다.
function solution(str) {
    str = str.toLowerCase().replace(/ /g, '');
    let alpha_cnt = {};
    for (let i = 0; i < str.length; i++)
        alpha_cnt[str[i]] = str[i] in alpha_cnt ? alpha_cnt[str[i]] + 1 : 1;
    return alpha_cnt;
}

//당근 탐지기
//땅 속에 숨겨져 있는 당근을 찾기 좋아하는 엘리스 토끼는 당근을 탐지할 수 있는 당근 탐지기를 가지고 왼쪽 혹은 오른쪽으로만 갈 수 있는 길이가 5인 길 어디인가에 떨어졌습니다.
/* 지시사항
    1. 매개변수 a에서 O, X를 받습니다. 매개변수 b에서는 위치 값인 숫자를 받습니다.
    2. 떨어진 위치를 기준으로 당근을 최대한 많이 획득할 수 있는 방향(왼쪽, 오른쪽)을 출력하세요.
        왼쪽과 오른쪽의 당근의 수가 동일한 경우 동일을 출력하세요.
    3. 출력은 solution 함수 안에서 return 하세요.
*/
/* 예시
    입력                출력
    "O X X O O", 3      오른쪽
*/
function solution(a, b) {
    let left = 0, right = 0;
    a = a.split(' '), b -= 1;
    for (let i = 0; i < a.length; i++)
        if (i < b && a[i] == 'O') left++;
        else if (i > b && a[i] == 'O') right++;
    return left > right ? "왼쪽" : left < right ? "오른쪽" : "동일";
}

//더치페이 계산하기
//A, B, C 세명의 친구는 점심을 함께 먹고 각자 먹은 메뉴에 따라 계산하기로 했습니다.
//세명의 친구가 각각 메뉴를 하나씩만 주문했다면 쉽게 계산이 가능했겠지만, B는 2개의 메뉴를 주문하고 C는 3개를 주문했습니다.
//거기에 세명이 함께 먹는 사이드메뉴까지 포함되어 있어서 이를 반영해서 각자 지불할 금액을 계산하는 프로그램을 만드려고 합니다.
/* 지시사항
    1. menu 라는 객체에 메뉴명을 키로, 메뉴의 가격을 값으로 저장되어 있습니다.
    2. 이들이 주문한 내역은 먹은사람, 메뉴이름, 수량의 형태로 입력받습니다. 만약 세명이 다같이 먹은 메뉴라면 K로 표시합니다.
    3. 각자 지불할 금액을 계산하여 객체에 담아 출력합니다.
    4. 출력할 값은 solution 함수에서 return 해주세요.
*/
/* 예시
    입력                    출력
    [                       { A: 7000, B: 10000, C: 2000 }
    [ "A", "라면", 1],
    [ "B", "김밥", 2],
    [ "B", "떡볶이", 1],
    [ "K", "튀김세트", 1],
    [ "C", "콜라", 1 ]
    ];
*/
//채점과정에서 사용하는 함께 먹은 금액 k는 3으로 나누어 떨어지니, 3으로 나누어 떨어지는지 체크하지 않아도 됩니다.
function solution(input) {
    let answer = { A: 0, B: 0, C: 0 };
    const menu = {
        "떡볶이": 5000,
        "김밥": 2000,
        "튀김세트": 3000,
        "순대": 4000,
        "라면": 6000,
        "콜라": 1000,
        "사이다": 1000
    };
    for (let i of input)
        if (i[0] == 'K') {
            const dutch = menu[i[1]] * i[2] / 3;
            answer.A += dutch, answer.B += dutch, answer.C += dutch;
        } else answer[i[0]] += menu[i[1]] * i[2];
    return answer;
}